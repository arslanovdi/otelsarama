services:
  jaeger:
    image: jaegertracing/all-in-one:latest
    restart: unless-stopped
    ports:
      - "4317:4317"
      - "6831:6831/udp"
      - "16686:16686"
    networks:
      - examplelan

  kafka1:
    container_name: kafka1
    hostname: kafka1
    image: bitnami/kafka:latest
    restart: unless-stopped
    ports:
      - "29092:29092"                                                                      # открываем порт для подключения клиентов, извне контейнера
    environment:
      # KAFKA CLUSTER
      KAFKA_CFG_NODE_ID: 1                                                                 # Уникальный идентификатор узла в кластере
      KAFKA_KRAFT_CLUSTER_ID: HE5uOlWcSg6jiUydVtaRzQ                                       # Генерируем идентификатор кластера: docker compose exec kafka1 kafka-storage.sh random-uuid
      KAFKA_CFG_PROCESS_ROLES: broker,controller                                           # узел может входить в кворум как контроллер и как брокер
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093,2@kafka2:9093,3@kafka3:9093        # список нод, для кворума (здесь нужно перечислить адреса всех известных контроллеров)
      # LISTENERS
      KAFKA_CFG_LISTENERS: INTERNAL://:9091,CONTROLLER://:9093,EXTERNAL://:29092           # публикуем порты на которые брокер будет принимать сообщения
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://:9091,EXTERNAL://127.0.0.1:29092          # публикуем порты для подключения клиентов
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT   # разрешаем доступ без шифрования и авторизации
      # BROKER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL                                       # название слушателя для брокера
      # CONTROLLER
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER                                      # название слушателя для контроллера
      # CLIENT
      KAFKA_CLIENT_LISTENER_NAME: EXTERNAL                                                 # название слушателя для клиента
      # COMMON SETTIGNS
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: false                                           # запрещаем автоматическое создание топиков
      #ALLOW_PLAINTEXT_LISTENER: yes

    networks:
      - examplelan
    volumes:
      - kafka_1_data:/bitnami/kafka
    healthcheck:
      # проверка состояния контейнера. проверка происходит по готовности порта 9091
      test: "bash -c 'printf \"\" > /dev/tcp/127.0.0.1/9091; exit $$?;'"
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 30s

  kafka2:
    container_name: kafka2
    hostname: kafka2
    image: bitnami/kafka:latest
    restart: unless-stopped
    ports:
      - "29093:29093"
    environment:
      # KAFKA CLUSTER
      KAFKA_CFG_NODE_ID: 2
      KAFKA_KRAFT_CLUSTER_ID: HE5uOlWcSg6jiUydVtaRzQ
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      # LISTENERS
      KAFKA_CFG_LISTENERS: INTERNAL://:9091,CONTROLLER://:9093,EXTERNAL://:29093
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://:9091,EXTERNAL://127.0.0.1:29093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      # BROKER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      # CONTROLLER
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      # CLIENT
      KAFKA_CLIENT_LISTENER_NAME: EXTERNAL
      # COMMON SETTIGNS
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: false
      #ALLOW_PLAINTEXT_LISTENER: yes

    networks:
      - examplelan
    volumes:
      - kafka_2_data:/bitnami/kafka
    healthcheck:
      test: "bash -c 'printf \"\" > /dev/tcp/127.0.0.1/9091; exit $$?;'"
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 30s

  kafka3:
    container_name: kafka3
    hostname: kafka3
    image: bitnami/kafka:latest
    restart: unless-stopped
    ports:
      - "29094:29094"
    environment:
      # KAFKA CLUSTER
      KAFKA_CFG_NODE_ID: 3
      KAFKA_KRAFT_CLUSTER_ID: HE5uOlWcSg6jiUydVtaRzQ
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      # LISTENERS
      KAFKA_CFG_LISTENERS: INTERNAL://:9091,CONTROLLER://:9093,EXTERNAL://:29094
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://:9091,EXTERNAL://127.0.0.1:29094
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      # BROKER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      # CONTROLLER
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      # CLIENT
      KAFKA_CLIENT_LISTENER_NAME: EXTERNAL
      # COMMON SETTIGNS
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: false
      #ALLOW_PLAINTEXT_LISTENER: yes

    networks:
      - examplelan
    volumes:
      - kafka_3_data:/bitnami/kafka
    healthcheck:
      test: "bash -c 'printf \"\" > /dev/tcp/127.0.0.1/9091; exit $$?;'"
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 30s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    restart: unless-stopped
    ports:
      - "9001:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: example_otel_sarama
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka1:9091,kafka2:9091,kafka3:9091
    networks:
      - examplelan
    depends_on:
      kafka1:
        condition: service_started
      kafka2:
        condition: service_started
      kafka3:
        condition: service_started
volumes:
  kafka_1_data:
    driver: local
  kafka_2_data:
    driver: local
  kafka_3_data:
    driver: local

networks:
  examplelan:
    driver: bridge